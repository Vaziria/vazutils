import os
import logging
import time

from stem import Signal
from stem.control import Controller
import requests

from gevent.subprocess import Popen, PIPE, CREATE_NEW_CONSOLE

from .logger import Logger

logger = Logger(__name__)
logging.getLogger('stem').setLevel(logging.INFO)


class Tor:
	
	torShell = None
	listen_port = 9050
	controll_port = 9051
	running = False
	fconfig = None
	basedir = './tor_proxy/'
	timeout = 120


	
	
	def __init__(self, port = None, controll_port = None, fconfig = 'torrc'):

		if port:
			self.listen_port = port

		if controll_port:
			self.controll_port = controll_port

		self.fconfig = fconfig

		self.generate_config(self.basedir, self.fconfig)



	
	def run(self):
		#D:\portable\work\dewa_petir\Tor\tor.exe -f ..\Data\Tor\torrc
		self.torShell = Popen('%s -f %s'%('{}Tor/tor.exe'.format(self.basedir), self.fconfig), creationflags=CREATE_NEW_CONSOLE)
		time.sleep(3)
		self.is_running()
		
	def is_running(self):
		
		with Controller.from_port(port = self.controll_port) as controller:
			controller.authenticate(password = '')
			
			for c in range(0, self.timeout):
				response = controller.get_info("status/bootstrap-phase")

				if(response.find('SUMMARY="Done"') > 0):
					logger.info('dewa petir {} siap...'.format(self.fconfig))
					
					self.running = True
					return True
				else:
					logger.debug("loading thor..")
					
				time.sleep(1)

			self.close()

			return False
		
	def change_relay(self):
		with Controller.from_port(port = self.controll_port) as controller:
			controller.authenticate()
			controller.signal(Signal.NEWNYM)


	def check_ip(self):

		proxies = {
			'http': 'socks5://127.0.0.1:{}'.format(self.listen_port),
			'https': 'socks5://127.0.0.1:{}'.format(self.listen_port)
		}

		hasil = requests.get('http://ifconfig.me/ip', proxies=proxies).text
		
		logger.info('{} with ip {}'.format(self.fconfig, hasil))

		return hasil


	def generate_config(self, path, fname = 'torrc'):

		if not os.path.isabs(path):
			path = os.path.abspath(path)

		path = path.replace('/', '\\')

		data_path = './data/tor/{}/'.format(self.fconfig)
		if not os.path.isabs(data_path):
			data_path = os.path.abspath(data_path)

		data_path = data_path.replace('/', '\\')


		if not os.path.exists(data_path):
			os.makedirs(data_path)

		content = """
# This file was generated by Tor; if you edit it, comments will not be preserved
# The old torrc file was renamed to torrc.orig.1 or similar, and Tor will ignore it

DataDirectory {data_path}
GeoIPFile {path}\\Data\\Tor\\geoip
GeoIPv6File {path}\\Data\\Tor\\geoip6
HiddenServiceStatistics 0


#CircuitBuildTimeout 600
#LearnCircuitBuildTimeout 0
MaxCircuitDirtiness 60


#control tor

ControlPort {controll_port}
SocksPort {listen_port}
		""".format(
			path = path,
			data_path = data_path,
			controll_port = self.controll_port,
			listen_port = self.listen_port
			)

		with open(fname, 'w+') as out:
			out.write(content)


	def close(self):

		if self.running:
			self.running = False
			logger.info('terminate {}'.format(self.fconfig))
			self.torShell.terminate()


		
if __name__ == '__main__':
	import time
	tor = Tor()
	tor.run()
	
	time.sleep(20)
	tor.changeRelay()
	time.sleep(8)
	tor.changeRelay()
	time.sleep(7)
	tor.close()